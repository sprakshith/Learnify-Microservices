name: Spring Boot CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-user-service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adoptopenjdk'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build jar and Run tests for user-service
        run: |
          cd user-service
          mvn clean package -DskipTests
          mvn test
          docker build -t ${{ secrets.DOCKER_USERNAME }}/learnify-user-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/learnify-user-service:latest
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          MYSQL_DB: authentication
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: 3306
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}

  build-course-service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adoptopenjdk'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build jar and Run tests for course-service
        run: |
          cd course-service
          mvn clean package -DskipTests
          mvn test
          docker build -t ${{ secrets.DOCKER_USERNAME }}/learnify-course-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/learnify-course-service:latest
        env:
          MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
          MONGO_PW: ${{ secrets.MONGO_PW }}
          MONGO_HOST: ${{ secrets.MONGO_HOST }}
          MONGO_PORT: 27017
          MONGO_DATABASE: course-service

  build-notification-service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adoptopenjdk'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build jar and Run tests for notification-service
        run: |
          cd notification-service
          mvn clean package -DskipTests
          mvn test
          docker build -t ${{ secrets.DOCKER_USERNAME }}/learnify-notification-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/learnify-notification-service:latest
        env:
          BOOTSTRAP_SERVERS: {{ secrets.BOOTSTRAP_SERVERS }}